/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

"use strict";

/**
 * the AMD define function
 */
module.exports.amdDefine = "__webpack_require__.amdD";

/**
 * the AMD options
 */
module.exports.amdOptions = "__webpack_require__.amdO";

/**
 * Creates an async module. The body function must be a async function.
 * "module.exports" will be decorated with an AsyncModulePromise.
 * The body function will be called.
 * To handle async dependencies correctly do this: "([a, b, c] = await handleDependencies([a, b, c]));".
 * If "hasAwaitAfterDependencies" is truthy, "handleDependencies()" must be called at the end of the body function.
 * Signature: function(
 * module: Module,
 * body: (handleDependencies: (deps: AsyncModulePromise[]) => Promise<any[]> & () => void,
 * hasAwaitAfterDependencies?: boolean
 * ) => void
 */
module.exports.asyncModule = "__webpack_require__.a";

/**
 * The internal symbol that asyncModule is using.
 */
module.exports.asyncModuleDoneSymbol = "__webpack_require__.aD";

/**
 * The internal symbol that asyncModule is using.
 */
module.exports.asyncModuleExportSymbol = "__webpack_require__.aE";

/**
 * the baseURI of current document
 */
module.exports.baseURI = "__webpack_require__.b";

/**
 * global callback functions for installing chunks
 */
module.exports.chunkCallback = "webpackChunk";

/**
 * the chunk name of the chunk with the runtime
 */
module.exports.chunkName = "__webpack_require__.cn";

/**
 * compatibility get default export
 */
module.exports.compatGetDefaultExport = "__webpack_require__.n";

/**
 * create a fake namespace object
 */
module.exports.createFakeNamespaceObject = "__webpack_require__.t";

/**
 * function to promote a string to a TrustedScript using webpack's Trusted
 * Types policy
 * Arguments: (script: string) => TrustedScript
 */
module.exports.createScript = "__webpack_require__.ts";

/**
 * function to promote a string to a TrustedScriptURL using webpack's Trusted
 * Types policy
 * Arguments: (url: string) 